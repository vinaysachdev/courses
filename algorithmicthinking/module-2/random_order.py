"""
Implementation of random_order and plotting of graphs generated by various methods
"""
import SimpleGUICS2Pygame.simpleplot as simpleplot
from random import shuffle
from upa import upa
from load_graph import load_graph, targeted_order
from make_graph import make_undirected_random_graph
from bfs import compute_resilience
from fast_targeted_order import fast_targeted_order

NETWORK_URL = "http://storage.googleapis.com/codeskulptor-alg/alg_rf7.txt"
NUM_NODES = 1347

def random_order(graph):
    """
    Takes a graph and returns a list of the nodes in the graph in some random order.
    """
    nodes = graph.keys()
    shuffle(nodes)
    return nodes

def prepare_plot(graph):
    """
    Takes a graph and function to load graph, calls random_order on graph and then 
    calls compute_resilience and returns the list of largest connected components
    """
    #list_of_nodes = random_order(graph)
    list_of_nodes = fast_targeted_order(graph)
    connected_comps = compute_resilience(graph, list_of_nodes)
    plot = []
    #start_range = len(list_of_nodes)
    for no_of_nodes_removed in range(0, len(list_of_nodes)):
        plot.append([no_of_nodes_removed, connected_comps[no_of_nodes_removed]])
    return plot

##########################################
# plotting code

# plot computer network resillience
graph = load_graph(NETWORK_URL)
computer_network_plot = prepare_plot(graph)

# plot ER graph resilience
probability = 0.00175
graph = make_undirected_random_graph(NUM_NODES, probability)
er_plot = prepare_plot(graph)

# plot UPA graph resilience
initial_num = 2
graph = upa(NUM_NODES, initial_num)
upa_plot = prepare_plot(graph)

simpleplot.plot_lines("Plot of Network Resilience under attack\nfast_targeted_order(Desktop Python)", 700, 700, 
                        "nodes removed", "largest_connected_component", 
                        [computer_network_plot, er_plot, upa_plot], False, 
                        ["Computer Network", "ER(p=0.00175)", "UPA(m=2)"])
simpleplot._block()
